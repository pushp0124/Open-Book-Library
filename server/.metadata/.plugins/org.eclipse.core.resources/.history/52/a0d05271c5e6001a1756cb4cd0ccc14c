package com.capgemini.bookStore.service;

import java.sql.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capgemini.bookStore.bean.Book;
import com.capgemini.bookStore.bean.BookAuthor;
import com.capgemini.bookStore.bean.BookCategory;
import com.capgemini.bookStore.bean.BookPublisher;
import com.capgemini.bookStore.bean.Credential;
import com.capgemini.bookStore.bean.IssueBook;
import com.capgemini.bookStore.bean.User;
import com.capgemini.bookStore.dao.BookAuthorDao;
import com.capgemini.bookStore.dao.BookCategoryDao;
import com.capgemini.bookStore.dao.BookDao;
import com.capgemini.bookStore.dao.BookPublisherDao;
import com.capgemini.bookStore.dao.CredentialDao;
import com.capgemini.bookStore.dao.IssueBookDao;
import com.capgemini.bookStore.dao.UserDao;
import com.capgemini.bookStore.exception.CapgBookStoreException;
import com.capgemini.bookStore.util.Utility;

@Service
public class BookStoreServiceImpl implements BookStoreService {

	
	@Autowired
	UserDao userRepo;

	@Autowired
	CredentialDao credentialRepo;
	
	@Autowired
	BookDao bookRepo;
	
	@Autowired
	IssueBookDao issueBookRepo;

	@Autowired
	BookAuthorDao bookAuthorRepo;

	@Autowired
	BookPublisherDao bookPublisherRepo;

	@Autowired
	BookCategoryDao bookCategoryRepo;

	

	public User updatePassword(String phoneNo, String newPassword) throws CapgBookStoreException {
		
		return null;
	}

	public User areCredentialsMatched(String mailId, String password) throws CapgBookStoreException {
		
		try {
			Optional<Credential> optionalCredential = credentialRepo.findByMailId(mailId);
			if (optionalCredential.isPresent()) {
				Credential credential = optionalCredential.get();
				String hashUserPassword = HashAlgorithmService.hashedPassword(password, credential.getSaltArray());
				if (hashUserPassword.equals(credential.getHashedPassword())) {
					return userRepo.findByMailId(mailId).get();
				}
				throw new CapgBookStoreException("Password mismatch");

			} else {
				throw new CapgBookStoreException("Mail Id is not registered!");
			}

		} catch (Exception exception) {
			throw new CapgBookStoreException(exception.getMessage());

		}
	}

	public Integer registerUser(User user, String password, Boolean isAdmin) throws CapgBookStoreException {
		try {
		
			Optional<User> optionalEmployee = userRepo.findByMailId(user.getUserEmail());
			if(optionalEmployee.isPresent()) {
				throw new CapgBookStoreException("Account with mail id already exists");
			}
			Optional<User> _optionalEmployee = userRepo.findByPhoneNo(user.getUserPhoneNo());
			if(_optionalEmployee.isPresent()) {
				throw new CapgBookStoreException("Account with phone No already exists");
			}
			user.setIsAdmin(isAdmin);
			userRepo.save(user);
			User _user = userRepo.findByMailId(user.getUserEmail()).get();
			Credential credential = new Credential();
			credential.setUserId(_user.getUserId());
			credential.setMailId(_user.getUserEmail());

			byte[] salt = HashAlgorithmService.createSalt();
			String hashedPassword = HashAlgorithmService.hashedPassword(password, salt);
			credential.setHashedPassword(hashedPassword);
			credential.setSaltArray(salt);

			credentialRepo.save(credential);

			return user.getUserId();
		} catch (Exception exception) {

			throw new CapgBookStoreException(exception.getMessage());
		}
	}

	public List<Book> viewBooks() {
	
		return bookRepo.findAll();
		
	}

	public IssueBook issueBook(Date issueBookDate, Date returnDate, Integer bookId, Integer issuedToUserId) throws CapgBookStoreException {
		
		//check if book is already booked, availableCopies are zero and throw exception if booked
		
		User issuedToUser = Utility.utilityObject.getUserFromUserId(issuedToUserId, userRepo);
		Book issuedBook = Utility.utilityObject.getBookFromBookId(bookId, bookRepo);
		IssueBook issueBook = new IssueBook();
		issueBook.setIssueDate(issueBookDate);
		issueBook.setIssuedToUser(issuedToUser);
		issueBook.setIssuedBook(issuedBook);
		issueBook.setReturnDate(returnDate);
		issueBook = issueBookRepo.save(issueBook);
		return issueBook;
	}

	public BookCategory addBookCategory(BookCategory category) throws CapgBookStoreException {
		
		category = bookCategoryRepo.save(category);
		return category;
	}

	public BookAuthor addAuthor(BookAuthor author) throws CapgBookStoreException {
		author = bookAuthorRepo.save(author);
		return author;
	}

	public BookPublisher addPublisher(BookPublisher publisher) throws CapgBookStoreException {
		publisher = bookPublisherRepo.save(publisher);
		return publisher;
	}

	public Book addBook(Book book) throws CapgBookStoreException {
		book = bookRepo.save(book);
		return book;
	}

	public Book updateBook(Book book) throws CapgBookStoreException {
		Optional<Book> optionalBook = bookRepo.findById(book.getBookId());
		if(optionalBook.isEmpty()) {
			throw new CapgBookStoreException("Book with " + book.getBookId()  + " for updation doesn't exist");
		}
			book = bookRepo.save(book);
			return book;
		
	}

	
}
